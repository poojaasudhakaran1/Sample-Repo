name: Create Jira Epic from GitHub Project Item

on:
  project_v2_item:
    types: [created]

jobs:
  create-epic:
    runs-on: ubuntu-latest

    steps:
      - name: Fetch GitHub Project Item Title
        id: get-item
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GH_TOKEN }}
          script: |
            const itemId = context.payload.project_v2_item.node_id;

            const query = `
              query($id: ID!) {
                node(id: $id) {
                  ... on ProjectV2Item {
                    content {
                      ... on Issue {
                        title
                        body
                      }
                      ... on DraftIssue {
                        title
                        body
                      }
                    }
                  }
                }
              }
            `;

            const result = await github.graphql(query, { id: itemId });
            const content = result.node.content;
            return {
              title: content?.title || 'Untitled',
              body: content?.body || '',
              itemId
            };

      - name: Create Jira Epic
        id: create-jira
        env:
          JIRA_EMAIL: ${{ secrets.JIRA_EMAIL }}
          JIRA_API_TOKEN: ${{ secrets.JIRA_API_TOKEN }}
          JIRA_BASE_URL: ${{ secrets.JIRA_BASE_URL }}
        run: |
          echo "Creating Jira Epic for: ${{ steps.get-item.outputs.title }}"
          RESPONSE=$(curl -s -X POST "$JIRA_BASE_URL/rest/api/3/issue" \
            -u "$JIRA_EMAIL:$JIRA_API_TOKEN" \
            -H "Content-Type: application/json" \
            -d '{
              "fields": {
                "project": { "key": "YOUR_PROJECT_KEY" },
                "summary": "'"${{ steps.get-item.outputs.title }}"'",
                "description": "'"${{ steps.get-item.outputs.body }}"'",
                "issuetype": { "name": "Epic" }
              }
            }')
          echo "$RESPONSE" > response.json
          echo "jiraKey=$(jq -r .key response.json)" >> $GITHUB_OUTPUT

      - name: Update GitHub Project Custom Field with Jira Key
        uses: actions/github-script@v7
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
        with:
          github-token: ${{ secrets.GH_TOKEN }}
          script: |
            const itemId = '${{ steps.get-item.outputs.itemId }}';
            const jiraKey = '${{ steps.create-jira.outputs.jiraKey }}';
            const projectNumber = YOUR_PROJECT_NUMBER; // e.g., 1
            const fieldName = "Jira Key";

            // Get project ID
            const { repository } = await github.graphql(`
              query {
                viewer {
                  repository(name: "${{ github.event.repository.name }}") {
                    projectsV2(first: 10) {
                      nodes {
                        id
                        number
                      }
                    }
                  }
                }
              }
            `);

            const project = repository.projectsV2.nodes.find(p => p.number === projectNumber);
            const projectId = project.id;

            // Get field ID
            const fields = await github.graphql(`
              query($projectId: ID!) {
                node(id: $projectId) {
                  ... on ProjectV2 {
                    fields(first: 20) {
                      nodes {
                        id
                        name
                      }
                    }
                  }
                }
              }
            `, { projectId });

            const field = fields.node.fields.nodes.find(f => f.name === fieldName);
            if (!field) throw new Error("Field 'Jira Key' not found");
            const fieldId = field.id;

            // Update the custom field
            await github.graphql(`
              mutation($input: UpdateProjectV2ItemFieldValueInput!) {
                updateProjectV2ItemFieldValue(input: $input) {
                  projectV2Item {
                    id
                  }
                }
              }
            `, {
              input: {
                projectId,
                itemId,
                fieldId,
                value: { text: jiraKey }
              }
            });
